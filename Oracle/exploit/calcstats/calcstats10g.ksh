#!/bin/ksh
#==============================================================================
#
# NOM
#      calcstats.ksh
#
# ********************************************************
# AUTEUR           : MEMODBA
# VERSION          : 1.01.00 
# DATE DE CREATION : 20140424
# ********************************************************
# DESCRIPTION
#      Script pour les versions Oracle 10g
#      calcul des statistiques  
#
# USAGE
#      calcstats.ksh
#      en general a lancer une fois par jour
#      exemple de lancement par crontab 
#      0 * * * * /app/script/calcstats/calcstats.ksh >/app/script/calcstats/log/calcstats.log 2>&1
# Emplacement
#		/app/script/calcstats
#
# ********************************************************
# *                   MODIFICATIONS                      *
# *------------------------------------------------------*
# * Quand    | Qui | Quoi                                *
# *------------------------------------------------------*
#  20140424   MEMODBA    Creation
#  20140605   MEMODBA    Gestion tables externes/erreurs 
# ********************************************************
#==============================================================================

# ----------------------------------------------------------
#  chargement environnement
# ----------------------------------------------------------
.  `dirname $0`/calcstats.env

DBversion=0
# test variables sensibles non nulle

if [ -z "$LOGPATH"  ]
    then
echo "------------------------------------"> $CALCSTATS_LOG
echo "variable LOGPATH vide ">> $CALCSTATS_LOG
         exit
    fi

if [ -z "$CALCSTATS_LOG"  ]
    then
echo "------------------------------------"> $CALCSTATS_LOG
echo "variable CALCSTATS_LOG vide ">> $CALCSTATS_LOG
         exit
    fi


if [ -z "$MOIS"  ]
    then
echo "------------------------------------"> $CALCSTATS_LOG
echo "variable MOIS vide ">> $CALCSTATS_LOG
         exit
    fi



# test si base presente
type_mach=`uname`
if [ $type_mach = 'AIX' ] 
	then
nbr_pmon=` ps -ef | grep pmon_$ORACLE_SID| grep -cv grep`
else 
nbr_pmon=` ps -ef | grep pmon_$ORACLE_SID$| grep -cv grep`
fi 
  if [ $nbr_pmon -ne 1  ]
     then
echo "------------------------------------"> $CALCSTATS_LOG
echo " base $ORACLE_SID non presente ">> $CALCSTATS_LOG
           exit
     fi

sqlplus -s /nolog << EOF > $CALCSTATS_LOGTMP
connect / as sysdba
set head off pages 0 feed off lines 200
select substr(version, 1, instr(version, '.') -1 ) from v\$instance;
EOF
grep -v "Connect" $CALCSTATS_LOGTMP>$CALCSTATS_LOGTMP1

if [ `cat $CALCSTATS_LOGTMP | grep 'ORA-' | wc -l` -ne 0 ]
then
   exit 1
fi

DBversion=`cat $CALCSTATS_LOGTMP1`
export DBversion
rm -f $CALCSTATS_LOGTMP1 
rm -f $CALCSTATS_LOGTMP


#------------------------------LANCEMENT DU CALCUL DES STATISTIQUES-----------------------------------

echo "------------------------------------" > $CALCSTATS_LOG
echo $(date +"%d/%m/%Y:%H:%M:%S"):Lancement du calcul des statistiques >> $CALCSTATS_LOG

sqlplus -s /nolog << EOF >>$CALCSTATS_LOG
connect / as sysdba
set serveroutput on
set echo on feed on lines 200 head on timing on
DECLARE
   OBJLIST DBMS_STATS.OBJECTTAB;
   SGRANULARITY     VARCHAR2(500) ;
   SMETHODOPT       VARCHAR2(500) ;
   SSTALEPERCENT    VARCHAR2(500) ;
   SESTIMATEPERCENT VARCHAR2(500) ;
   SAUTOSTATSTARGET VARCHAR2(500) ;
   SDEGREE          VARCHAR2(500) ;
   SCASCADE         VARCHAR2(500) ;
   SNOINVALIDATE    VARCHAR2(500) ;
   SPUBLISH         VARCHAR2(500) ;
   SINCREMENTAL     VARCHAR2(500) ;
   TYPE TAB_OWNER IS   TABLE OF DBA_EXTERNAL_TABLES.OWNER%TYPE INDEX BY BINARY_INTEGER;
   TYPE TAB_NAME  IS   TABLE OF DBA_EXTERNAL_TABLES.TABLE_NAME%TYPE INDEX BY BINARY_INTEGER;
   TYPE NAMETABLEEXT IS
      RECORD
   (
      OWNER TAB_OWNER,
      TNAME TAB_OWNER) ;
   TNAMETABLEEXT NAMETABLEEXT;
   CURSOR C1
   IS 
      SELECT OWNER OWNER,TABLE_NAME TNAME
      FROM DBA_EXTERNAL_TABLES TEXT
      WHERE OWNER NOT IN('$EXCLUDE_SCHEMA')
      AND NOT EXISTS
         (SELECT 1
         FROM DBA_TAB_STATISTICS TSTS
         WHERE TEXT.TABLE_NAME     =TSTS.TABLE_NAME
         AND TEXT.OWNER            =TSTS.OWNER
         AND TSTS.STATTYPE_LOCKED IS NOT NULL
         );
   TYPE FETCH_ARRAY IS    TABLE OF C1%ROWTYPE;
   S_ARRAY FETCH_ARRAY;
BEGIN
   OPEN C1;
   LOOP 
      FETCH C1 BULK COLLECT INTO S_ARRAY ;
      DBMS_OUTPUT.PUT_LINE('------- Liste des tables externes non lockees--------') ;
      FOR I IN 1..S_ARRAY.COUNT
      LOOP         
         DBMS_STATS.LOCK_TABLE_STATS(S_ARRAY(I).OWNER,S_ARRAY(I).TNAME) ;
		 DBMS_OUTPUT.PUT_LINE(S_ARRAY(I).OWNER|| '.' ||S_ARRAY(I).TNAME || ' lockee') ;
      END LOOP;
      EXIT
   WHEN C1%NOTFOUND;
   END LOOP;
   CLOSE C1;
   
   DBMS_OUTPUT.PUT_LINE(CHR(15)) ;
   DBMS_OUTPUT.PUT_LINE('Parametrage du calcul des statistiques:') ;
   SMETHODOPT:=DBMS_STATS.GET_PARAM('METHOD_OPT') ;
   DBMS_OUTPUT.PUT_LINE('METHOD_OPT       ==> ' || SMETHODOPT) ;
   SESTIMATEPERCENT:=DBMS_STATS.GET_PARAM('ESTIMATE_PERCENT') ;
   DBMS_OUTPUT.PUT_LINE(' ESTIMATE_PERCENT ==> ' || SESTIMATEPERCENT) ;
   --SSTALEPERCENT:=DBMS_STATS.GET_PREFS('STALE_PERCENT') ;
   --DBMS_OUTPUT.PUT_LINE(' STALE_PERCENT    ==> ' || SSTALEPERCENT) ;
   SGRANULARITY:=DBMS_STATS.GET_PARAM('GRANULARITY') ;
   DBMS_OUTPUT.PUT_LINE(' GRANULARITY      ==> ' || SGRANULARITY) ;
   SAUTOSTATSTARGET:=DBMS_STATS.GET_PARAM('AUTOSTATS_TARGET') ;
   DBMS_OUTPUT.PUT_LINE(' AUTOSTATS_TARGET ==> ' || SAUTOSTATSTARGET) ;
   SDEGREE:=DBMS_STATS.GET_PARAM('DEGREE') ;
   DBMS_OUTPUT.PUT_LINE(' DEGREE           ==> ' || SDEGREE) ;
   SCASCADE:=DBMS_STATS.GET_PARAM('CASCADE') ;
   DBMS_OUTPUT.PUT_LINE(' CASCADE          ==> ' || SCASCADE) ;
   SNOINVALIDATE:=DBMS_STATS.GET_PARAM('NO_INVALIDATE') ;
   DBMS_OUTPUT.PUT_LINE(' NO_INVALIDATE    ==> ' || SNOINVALIDATE) ;
   --SPUBLISH:=DBMS_STATS.GET_PREFS('PUBLISH') ;
   --DBMS_OUTPUT.PUT_LINE(' PUBLISH          ==> ' || SPUBLISH) ;
   --SINCREMENTAL:=DBMS_STATS.GET_PREFS('INCREMENTAL') ;
   --DBMS_OUTPUT.PUT_LINE(' INCREMENTAL      ==> ' || SINCREMENTAL) ;
   DBMS_OUTPUT.PUT_LINE(CHR(15)) ;
   DBMS_STATS.FLUSH_DATABASE_MONITORING_INFO() ;
   DBMS_STATS.GATHER_DATABASE_STATS(OBJLIST=>OBJLIST,OPTIONS=>'LIST AUTO') ;
   DBMS_OUTPUT.PUT_LINE('Nombre d''objects identifiees: ' || OBJLIST.LAST) ;
   DBMS_OUTPUT.PUT_LINE(CHR(15)) ;
   DBMS_OUTPUT.PUT_LINE('Traitement des objects:') ;
   FOR I IN OBJLIST.FIRST..OBJLIST.LAST
   LOOP
      IF OBJLIST(I).OWNNAME NOT IN('$EXCLUDE_SCHEMA') THEN
         begin
            DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => OBJLIST(I).OWNNAME,TABNAME => OBJLIST(I).OBJNAME) ;
         exception
            when OTHERS THEN
                  DBMS_OUTPUT.PUT_LINE('Error :' || OBJLIST(I).OWNNAME || '.' || OBJLIST(I).OBJNAME || ' ' || SQLERRM) ;                  
         end;
         DBMS_OUTPUT.PUT_LINE('Traite :' || OBJLIST(I).OWNNAME || '.' || OBJLIST(I).OBJNAME || '('|| I || '/' || OBJLIST.LAST || ')') ;
      ELSE
         DBMS_OUTPUT.PUT_LINE('Non Traite :' || OBJLIST(I).OWNNAME || '.' || OBJLIST(I).OBJNAME || '('|| I || '/' || OBJLIST.LAST || ')') ;
      END IF;
   END LOOP;   
END;
/
/
EOF


#### test si ok
if [ `cat $CALCSTATS_LOG | grep 'ORA-' | wc -l` -ne 0 ]
  then
###### on conserve un an de log archive par mois
cat $CALCSTATS_LOG >> $CALCSTATS_LOG.$MOIS
      exit 1
  else
      echo $(date +"%d/%m/%Y:%H:%M:%S"):Fin du calcul des statistiques >> $CALCSTATS_LOG
###### on conserve un  an de log archive par mois
cat $CALCSTATS_LOG >> $CALCSTATS_LOG.$MOIS
  fi
