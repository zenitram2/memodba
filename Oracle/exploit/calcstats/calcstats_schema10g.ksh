#!/bin/ksh
#==============================================================================
#
# NOM
#      calcstats_schema.ksh
#
# ********************************************************
# AUTEUR           : MEMODBA
# VERSION          : 1.00.00 
# DATE DE CREATION : 20140424
# ********************************************************
# DESCRIPTION
#      Script pour les versions Oracle 10g
#      calcul des statistiques pour un schema 
#
# USAGE
#      calcstats_schema.ksh
#      a lancer a la demanade
#      exemple de lancement  
#      /app/script/calcstats/calcstats_schema.ksh SCOTT >/app/script/calcstats/log/calcstats_schema.log 2>&1
# Emplacement
#		/app/script/calcstats
#
# ********************************************************
# *                   MODIFICATIONS                      *
# *------------------------------------------------------*
# * Quand    | Qui | Quoi                                *
# *------------------------------------------------------*
#
# ********************************************************
#==============================================================================
#************************* F_Aff_Usage() *******************************
F_Aff_Usage(){

sqlplus -s /nolog << EOF >$CALCSTATSSCHEMA_LOG
connect / as sysdba
set serveroutput on
set echo on feed on lines 200 head on timing on
DECLARE 
  CURSOR c1 IS select owner ,count(table_name) NbTables from dba_tables where  OWNER NOT IN ('$EXCLUDE_SCHEMA') group by owner order by owner;
  TYPE typeSchema IS TABLE OF c1%ROWTYPE;
 
  vtypeSchema  typeSchema;  -- nested table of records
  
BEGIN	 
    dbms_output.put_line(CHR(15));
	dbms_output.put_line('Liste des schemas possibles:');	
	OPEN c1;
	FETCH c1 BULK COLLECT INTO vtypeSchema;
    CLOSE c1;
	FOR i IN vtypeSchema.FIRST .. vtypeSchema.LAST LOOP
      DBMS_OUTPUT.PUT_LINE ( vtypeSchema(i).owner || rpad(' ',30-length(vtypeSchema(i).owner),' ') || ' ==> ' || vtypeSchema(i).NbTables  || ' tables' );
    END LOOP;
	dbms_output.put_line(CHR(15));
	dbms_output.put_line('Usage : calcstats_schema.ksh < SCHEMA >');
END;
/
EOF

cat $CALCSTATSSCHEMA_LOG  

#### test si ok
if [ `cat $CALCSTATSSCHEMA_LOG | grep 'ORA-' | wc -l` -ne 0 ]
  then
###### on conserve un an de log archive par mois
cat $CALCSTATSSCHEMA_LOG >> $CALCSTATSSCHEMA_LOG.$MOIS
      exit 1
  else
      echo $(date +"%d/%m/%Y:%H:%M:%S"):Fin du calcul des statistiques >> $CALCSTATSSCHEMA_LOG
###### on conserve un  an de log archive par mois
cat $CALCSTATSSCHEMA_LOG >> $CALCSTATSSCHEMA_LOG.$MOIS
  fi

}
   
# ----------------------------------------------------------
#  chargement environnement
# ----------------------------------------------------------
.  `dirname $0`/calcstats.env

DBversion=0
# test variables sensibles non nulle

if [ -z "$LOGPATH"  ]
    then
echo "------------------------------------"> $CALCSTATSSCHEMA_LOG
echo "variable LOGPATH vide ">> $CALCSTATSSCHEMA_LOG
         exit
    fi

if [ -z "$CALCSTATSSCHEMA_LOG"  ]
    then
echo "------------------------------------"> $CALCSTATSSCHEMA_LOG
echo "variable CALCSTATSSCHEMA_LOG vide ">> $CALCSTATSSCHEMA_LOG
         exit
    fi


if [ -z "$MOIS"  ]
    then
echo "------------------------------------"> $CALCSTATSSCHEMA_LOG
echo "variable MOIS vide ">> $CALCSTATSSCHEMA_LOG
         exit
    fi



# test si base presente
type_mach=`uname`
if [ $type_mach = 'AIX' ] 
	then
nbr_pmon=` ps -ef | grep pmon_$ORACLE_SID| grep -cv grep`
else 
nbr_pmon=` ps -ef | grep pmon_$ORACLE_SID$| grep -cv grep`
fi 
  if [ $nbr_pmon -ne 1  ]
     then
echo "------------------------------------"> $CALCSTATSSCHEMA_LOG
echo " base $ORACLE_SID non presente ">> $CALCSTATSSCHEMA_LOG
           exit
     fi

if [ "$#" = "0" ]
then
   F_Aff_Usage
   exit 1
fi


# Read the parameters
SCHEMA=$1
	 
sqlplus -s /nolog << EOF > $CALCSTATSSCHEMA_LOGTMP
connect / as sysdba
set head off pages 0 feed off lines 200
select substr(version, 1, instr(version, '.') -1 ) from v\$instance;
EOF
grep -v "Connect" $CALCSTATSSCHEMA_LOGTMP>$CALCSTATSSCHEMA_LOGTMP1

if [ `cat $CALCSTATSSCHEMA_LOGTMP | grep 'ORA-' | wc -l` -ne 0 ]
then
   exit 1
fi

DBversion=`cat $CALCSTATSSCHEMA_LOGTMP1`
export DBversion
rm -f $CALCSTATSSCHEMA_LOGTMP1 
rm -f $CALCSTATSSCHEMA_LOGTMP


#------------------------------LANCEMENT DU CALCUL DES STATISTIQUES-----------------------------------

echo "------------------------------------" > $CALCSTATSSCHEMA_LOG
echo $(date +"%d/%m/%Y:%H:%M:%S"):Lancement du calcul des statistiques pour le schema $SCHEMA >> $CALCSTATSSCHEMA_LOG

sqlplus -s /nolog << EOF >>$CALCSTATSSCHEMA_LOG
connect / as sysdba
set serveroutput on
set echo on feed on lines 200 head on timing on
DECLARE
      ObjList dbms_stats.ObjectTab;
	  sGranularity Varchar2(500);
	  sMethodOpt Varchar2(500);
	  sStalePercent Varchar2(500);
	  sEstimatePercent Varchar2(500);
	  sAutostatsTarget Varchar2(500);
	  sDegree Varchar2(500);
	  sCascade Varchar2(500);
	  sNoInvalidate Varchar2(500);
	  sPublish Varchar2(500);
	  sIncremental Varchar2(500);
BEGIN	 
     dbms_output.put_line(CHR(15));
	 dbms_output.put_line('ParamÃ¨trage du calcul des statistiques:');	 
	 sMethodOpt:=dbms_stats.GET_PARAM('METHOD_OPT');
	 dbms_output.put_line('METHOD_OPT       ==> ' || sMethodOpt );
	 sEstimatePercent:=dbms_stats.GET_PARAM('ESTIMATE_PERCENT');
	 dbms_output.put_line(' ESTIMATE_PERCENT ==> ' || sEstimatePercent );
	 --sStalePercent:=dbms_stats.GET_PARAM('STALE_PERCENT');
	 --dbms_output.put_line(' STALE_PERCENT    ==> ' || sStalePercent );
	 sGranularity:=dbms_stats.GET_PARAM('GRANULARITY'); 
	 dbms_output.put_line(' GRANULARITY      ==> ' || sGranularity );
	 sAutostatsTarget:=dbms_stats.GET_PARAM('AUTOSTATS_TARGET');
	 dbms_output.put_line(' AUTOSTATS_TARGET ==> ' || sAutostatsTarget );
	 sDegree:=dbms_stats.GET_PARAM('DEGREE');
	 dbms_output.put_line(' DEGREE           ==> ' || sDegree );
	 sCascade:=dbms_stats.GET_PARAM('CASCADE');
	 dbms_output.put_line(' CASCADE          ==> ' || sCascade );
	 sNoInvalidate:=dbms_stats.GET_PARAM('NO_INVALIDATE');
	 dbms_output.put_line(' NO_INVALIDATE    ==> ' || sNoInvalidate );
	 --sPublish:=dbms_stats.get_prefs('PUBLISH');
	 --dbms_output.put_line(' PUBLISH          ==> ' || sPublish );
	 --sIncremental:=dbms_stats.get_prefs('INCREMENTAL');
	 --dbms_output.put_line(' INCREMENTAL      ==> ' || sIncremental );
	 dbms_output.put_line(CHR(15));
	 	 
	 dbms_output.put_line('DBMS_STATS.GATHER_SCHEMA_STATS(OWNNAME => $SCHEMA)');
	 DBMS_STATS.GATHER_SCHEMA_STATS(OWNNAME => '$SCHEMA');
END;
/
EOF


#### test si ok
if [ `cat $CALCSTATSSCHEMA_LOG | grep 'ORA-' | wc -l` -ne 0 ]
  then
###### on conserve un an de log archive par mois
cat $CALCSTATSSCHEMA_LOG >> $CALCSTATSSCHEMA_LOG.$MOIS
      exit 1
  else
      echo $(date +"%d/%m/%Y:%H:%M:%S"):Fin du calcul des statistiques >> $CALCSTATSSCHEMA_LOG
###### on conserve un  an de log archive par mois
cat $CALCSTATSSCHEMA_LOG >> $CALCSTATSSCHEMA_LOG.$MOIS
  fi
