#!/bin/ksh
#==============================================================================
#
# NOM
#      sqlbaseline.ksh
#
# ********************************************************
# AUTEUR           : MEMODBA
# VERSION          : 1.01.00 
# DATE DE CREATION : 20151124
# ********************************************************
# DESCRIPTION
#      Script pour les versions Oracle 11g
#      Auto Evolve des plans d'une baseline 
#
# USAGE
#      sqlbaseline.ksh
#      en general a lancer une fois par jour
#      exemple de lancement par crontab 
#      0 * * * * /app/script/sqlbaseline/sqlbaseline.ksh >/app/script/sqlbaseline/log/sqlbaseline.log 2>&1
# Emplacement
#		/app/script/sqlbaseline
#
# ********************************************************
# *                   MODIFICATIONS                      *
# *------------------------------------------------------*
# * Quand    | Qui | Quoi                                *
# *------------------------------------------------------*
#
# ********************************************************
#==============================================================================

# ----------------------------------------------------------
#  chargement environnement
# ----------------------------------------------------------
.  `dirname $0`/sqlbaseline.env


export DateTraitement=$(date '+%y%m%d_%HH%M')

DBversion=0
# test variables sensibles non nulle

if [ -z "$LOGPATH"  ]
    then
echo "------------------------------------"> $SQLBASELINE_LOG
echo "variable LOGPATH vide ">> $SQLBASELINE_LOG
         exit
    fi

if [ -z "$SQLBASELINE_LOG"  ]
    then
echo "------------------------------------"> $SQLBASELINE_LOG
echo "variable SQLBASELINE_LOG vide ">> $SQLBASELINE_LOG
         exit
    fi


if [ -z "$MOIS"  ]
    then
echo "------------------------------------"> $SQLBASELINE_LOG
echo "variable MOIS vide ">> $SQLBASELINE_LOG
         exit
    fi



# test si base presente
type_mach=`uname`
if [ $type_mach = 'AIX' ] 
	then
nbr_pmon=` ps -ef | grep pmon_$ORACLE_SID| grep -cv grep`
else 
nbr_pmon=` ps -ef | grep pmon_$ORACLE_SID$| grep -cv grep`
fi 
  if [ $nbr_pmon -ne 1  ]
     then
echo "------------------------------------"> $SQLBASELINE_LOG
echo " base $ORACLE_SID non presente ">> $SQLBASELINE_LOG
           exit
     fi

sqlplus -s /nolog << EOF > $SQLBASELINE_LOGTMP
connect / as sysdba
set head off pages 0 feed off lines 200
select substr(version, 1, instr(version, '.') -1 ) from v\$instance;
EOF
grep -v "Connect" $SQLBASELINE_LOGTMP>$SQLBASELINE_LOGTMP1

if [ `cat $SQLBASELINE_LOGTMP | grep 'ORA-' | wc -l` -ne 0 ]
then
   exit 1
fi

DBversion=`cat $SQLBASELINE_LOGTMP1`
export DBversion
rm -f $SQLBASELINE_LOGTMP1 
rm -f $SQLBASELINE_LOGTMP


#------------------------------LANCEMENT DES EVALUATIONS DES REQUETES-----------------------------------

echo "------------------------------------" > $SQLBASELINE_LOG
echo $(date +"%d/%m/%Y:%H:%M:%S"):Lancement des evaluation des requetes >> $SQLBASELINE_LOG

touch spm_evolve.sql
> spm_evolve.sql

sqlplus -s /nolog << EOF >>$SQLBASELINE_LOG
connect / as sysdba
set serveroutput on
spool spm_evolve.sql
set feedback off
set heading off
set echo on feed off lines 200 head off timing oFF
DECLARE
  CURSOR c_nuevos_baselines
  IS
    SELECT sql_handle,
      PLAN_NAME,
      (SELECT COUNT(1)
      FROM DBA_SQL_PLAN_BASELINES b2
      WHERE b.sql_handle=b2.sql_handle
      AND b2.accepted   ='YES'
      ) nbaccepted
  FROM DBA_SQL_PLAN_BASELINES b
  WHERE enabled='YES'
  AND accepted ='NO'
  AND created  > (sysdate - ($PROFONDEURTPS /24))
  and LAST_VERIFIED is null
  ORDER BY sql_handle,
    PLAN_NAME,
    created;
BEGIN
  DBMS_OUTPUT.PUT_LINE('var r clob;');
  DBMS_OUTPUT.PUT_LINE('set long 100000');
  DBMS_OUTPUT.PUT_LINE('spool evolve-results-$DateTraitement.txt');  
  FOR r_bl IN c_nuevos_baselines
  LOOP
    DBMS_OUTPUT.PUT_LINE(' exec dbms_output.put_line(''***********************************************'' );');
    IF r_bl.nbaccepted > 0 THEN
      DBMS_OUTPUT.PUT_LINE('exec :r:=dbms_spm.evolve_sql_plan_baseline(sql_handle =>''' || r_bl.sql_handle|| ''',plan_name=>'''||r_bl.plan_name||''', commit =>''YES'');');
      DBMS_OUTPUT.PUT_LINE('print;');
    END IF;
    DBMS_OUTPUT.PUT_LINE('select * from table(dbms_xplan.display_sql_plan_baseline('||'sql_handle=>''' ||r_bl.sql_handle||''',PLAN_NAME=>'''|| r_bl.PLAN_NAME||'''));');
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('spool off');
END;
/

spool off;

@spm_evolve.sql;


EOF



#### test si ok
if [ `cat $SQLBASELINE_LOG | grep 'ORA-' | wc -l` -ne 0 ]
  then
###### on conserve un an de log archive par mois
cat $SQLBASELINE_LOG >> $SQLBASELINE_LOG.$MOIS
		##### Envoie du mail vers xxx@xxxx.xxx
		#echo ' Resultat de l evaluation des requetes' | mail -s "[$ORACLE_SID] - SPM evolve - KO" -a evolve-results-$DateTraitement.txt -r memodba@gmail.com   xxx@xxxx.xxx
		rm -f evolve-results-$DateTraitement.txt 
      exit 1
  else
      echo $(date +"%d/%m/%Y:%H:%M:%S"):Fin des evaluation des requetes >> $SQLBASELINE_LOG
###### on conserve un  an de log archive par mois
cat $SQLBASELINE_LOG >> $SQLBASELINE_LOG.$MOIS
  fi
##### Envoie du mail vers xxx@xxxx.xxx
#echo ' Resultat de l evaluation des requetes' | mail -s "[$ORACLE_SID] - SPM evolve - OK" -a evolve-results-$DateTraitement.txt -r memodba@gmail.com   xxx@xxxx.xxx
rm -f evolve-results-$DateTraitement.txt   
 