--
-- ********************************************************
-- NOM              : PRC_GRANTS.sql
-- LANGAGE          : PL/SQL
-- ********************************************************
-- AUTEUR           : MEMODBA
-- VERSION          : 1.00.00
-- DATE DE CREATION : 19/12/2014
-- ********************************************************
-- DESCRIPTION      :
-- PROCEDURE PL/SQL d'affectation de droits  
-- 
-- 
-- 
--USAGE 
--		PRC_GRANTS( SUSERSOURCE => 'CIRSER1', SUSERCIBLE => 'FLUXETL', BSYNONYM => true, SOBJETS=>'TERVVM,SERECF,SERCTR',SGRANTS => 'SELECT,UPDATE') ;
--
--Emplacement
--		dans le schema TWSI (ou un schema dba) 
--      Le compte nécessite les droits suivants:
--			grant select on sys.dba_tables to <schema>;
--			grant select on sys.DBA_VIEWS to <schema>;
--			grant select on sys.DBA_SYNONYMS to <schema>;
--
-- ********************************************************
-- ********************************************************
-- *                   MODIFICATIONS                      *
-- *------------------------------------------------------*
-- * Quand  | Qui | Quoi                                  *
-- *------------------------------------------------------*
--                                                        *
-- ********************************************************

create or replace PROCEDURE  PRC_GRANTS
(
      SUSERSOURCE IN VARCHAR2,
      SUSERCIBLE  IN VARCHAR2,
      BSYNONYM    IN BOOLEAN DEFAULT FALSE,
      SGRANTS     IN VARCHAR2 := 'SELECT',
	  SOBJETS     IN VARCHAR2 := '')
authid current_user       
iS
   V_STMT_STR VARCHAR2(3000) ;
      
      
 TYPE tables_rec is RECORD (
    t_owner    sys.dba_tables.owner%TYPE,
    t_name     sys.dba_tables.table_name%TYPE
    );
    
-- Table type that can hold information about employees
   TYPE TabList_tab IS TABLE OF tables_rec;
   t_tab TabList_tab;         

   TYPE vues_rec is RECORD (
    v_owner    sys.Dba_Views.owner%TYPE,
    v_name     sys.Dba_Views.view_name%TYPE
    );
    
-- Table type that can hold information about employees
   TYPE TabList_vw IS TABLE OF vues_rec;
   t_vw TabList_vw;             

      SREQUETE  VARCHAR2(32000) ;
      SREQUETE2 VARCHAR2(32000) ;
      NBSYN     NUMBER;
      QUERY     VARCHAR2(4000) ;
      sQuery     VARCHAR2(4000) ;
      TYPE EMPCURTYP IS    REF    CURSOR;
      V_EMP_CURSOR EMPCURTYP;
      
      curid    NUMBER;
      ret NUMBER;
      desctab  DBMS_SQL.DESC_TAB;
      colcnt   NUMBER;
      namevar  VARCHAR2(50);
  numvar   NUMBER;
  datevar  DATE;
  
      
   BEGIN
   

/*
grant select on sys.dba_tables to twsi;
grant select on sys.DBA_VIEWS to twsi;
grant select on sys.DBA_SYNONYMS to twsi;
*/
  
   

   
      V_STMT_STR := ' ';
      SREQUETE   := '';
      SREQUETE2  := '';
      NBSYN      :=0;
      -- Début du traitement
      
      /* DBMS_OUTPUT.PUT_LINE(V_STMT_STR) ;
      DBMS_OUTPUT.PUT_LINE(SUSERSOURCE) ;
      DBMS_OUTPUT.PUT_LINE(SUSERCIBLE) ;
      DBMS_OUTPUT.PUT_LINE(SGRANTS) ;
	  DBMS_OUTPUT.PUT_LINE(SOBJETS) ; */
      NBSYN:=0;
      IF BSYNONYM THEN
         DBMS_OUTPUT.PUT_LINE('Ajout des droits ('|| SGRANTS || ')  et des synonymes sur les tables ' || SUSERSOURCE || ' pour ' || SUSERCIBLE  ) ;
         QUERY := 'select count(*)  from DBA_SYNONYMS where owner in (:a)';
         EXECUTE IMMEDIATE QUERY INTO NBSYN USING SUSERCIBLE;
         DBMS_OUTPUT.PUT_LINE('Nombre de synonymes présent:') ;
         DBMS_OUTPUT.PUT_LINE(NBSYN) ;
      else
         DBMS_OUTPUT.PUT_LINE('Ajout des droits ('|| SGRANTS || ') sur les tables '|| SUSERSOURCE || ' pour ' || SUSERCIBLE  ) ;
      END IF;
      
      
      curid:= dbms_sql.open_cursor;
      QUERY:='select owner,table_name from sys.dba_tables where owner=:b';
	  IF SOBJETS is not null then
		QUERY:= QUERY || q'[ and table_name in (select regexp_substr(:c,'[^,]+', 1, level) from dual connect by regexp_substr(:c, '[^,]+', 1, level) is not null)]';
	  end if;
      dbms_sql.parse(curid,QUERY,dbms_sql.native);
	  --dBMS_OUTPUT.PUT_LINE('QUERY :' || QUERY );
      dbms_sql.bind_variable(curid, ':b', SUSERSOURCE);
	  IF SOBJETS is not null then
		dbms_sql.bind_variable(curid, ':c', SOBJETS);
	  end if;
      ret := DBMS_SQL.EXECUTE(curid);
      
      V_EMP_CURSOR := DBMS_SQL.TO_REFCURSOR(curid);
      FETCH V_EMP_CURSOR BULK COLLECT INTO t_tab;
      close V_EMP_CURSOR;
      
      
      curid:= dbms_sql.open_cursor;
      QUERY:='SELECT OWNER,VIEW_NAME FROM SYS.DBA_VIEWS WHERE OWNER=:b';
	  IF SOBJETS is not null then
		QUERY:= QUERY || q'[ and VIEW_NAME in (select regexp_substr(:c,'[^,]+', 1, level) from dual connect by regexp_substr(:c, '[^,]+', 1, level) is not null)]';
	  end if;
	  --dBMS_OUTPUT.PUT_LINE('QUERY :' || QUERY );
      dbms_sql.parse(curid,QUERY,dbms_sql.native);
      dbms_sql.bind_variable(curid, ':b', SUSERSOURCE);
	  IF SOBJETS is not null then
		dbms_sql.bind_variable(curid, ':c', SOBJETS);
	  end if;
      ret := DBMS_SQL.EXECUTE(curid);
      
      V_EMP_CURSOR := DBMS_SQL.TO_REFCURSOR(curid);
      FETCH V_EMP_CURSOR BULK COLLECT INTO t_vw;
      close V_EMP_CURSOR;
      
      --dbms_sql.close_cursor(curid); 
      
      IF t_tab.LAST > 0 THEN
         FOR i IN 1..t_tab.LAST 
         LOOP      			
            QUERY :='GRANT ' || SGRANTS || ' ON ' || t_tab(i).t_owner || '.' || t_tab(i).t_name  || ' TO ' ||  SUSERCIBLE ;
                        
				EXECUTE IMMEDIATE QUERY;            
				dBMS_OUTPUT.PUT_LINE(t_tab(i).t_owner || '.' || t_tab(i).t_name || ':' || QUERY || ';');
			   
				if bSynonym  then
				   QUERY :='CREATE OR REPLACE SYNONYM ' || SUSERCIBLE || '."' ||t_tab(i).t_name || '" FOR ' || t_tab(i).t_owner || '."' || t_tab(i).t_name ||'"';
				   dBMS_OUTPUT.PUT_LINE(t_tab(i).t_owner || '.' || t_tab(i).t_name || ':' || QUERY || ';');
				   EXECUTE IMMEDIATE QUERY;               
				end if;
         END LOOP;
      end if;
  
      IF t_vw.LAST > 0 THEN
         FOR i IN 1..t_vw.LAST 
         LOOP      
            QUERY :='GRANT ' || SGRANTS || ' ON ' || t_vw(i).v_owner || '.' || t_vw(i).v_name  || ' TO ' ||  SUSERCIBLE ;
            
			
				EXECUTE IMMEDIATE QUERY;            
				dBMS_OUTPUT.PUT_LINE(t_vw(i).v_owner || '.' || t_vw(i).v_name || ':' || QUERY || ';');
				   
				if bSynonym  then
				   QUERY :='CREATE OR REPLACE SYNONYM ' || SUSERCIBLE || '."' ||t_vw(i).v_name || '" FOR ' || t_vw(i).v_owner || '."' || t_vw(i).v_name ||'"';
				   
				   EXECUTE IMMEDIATE QUERY;               
				   dBMS_OUTPUT.PUT_LINE(t_vw(i).v_owner || '.' || t_vw(i).v_name || ':' || QUERY || ';');
				end if;						
			
         END LOOP;
      end if;
       
           

   IF BSYNONYM THEN
      NBSYN :=0;
      QUERY := 'select count(*)  from DBA_SYNONYMS where owner in (:a)';
      EXECUTE IMMEDIATE QUERY INTO NBSYN USING SUSERCIBLE;
      DBMS_OUTPUT.PUT_LINE('Nombre de synonymes présent maintenant:') ;
      DBMS_OUTPUT.PUT_LINE(NBSYN) ;
   END IF;
   
       EXCEPTION WHEN OTHERS THEN
      BEGIN
        dBMS_OUTPUT.PUT_LINE(SQLCODE || ' - '|| SQLERRM );
        dBMS_OUTPUT.PUT_LINE('==> QUERY :' || QUERY );
        RETURN;
      END;
END PRC_GRANTS;
/