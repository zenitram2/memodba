#!/bin/ksh
#==============================================================================
#
# NOM
#      metricsMysql.sh
#
# ********************************************************
# AUTEUR           : MEMODBA
# VERSION          : 1.01.00
# DATE DE CREATION : 20150115
# ********************************************************
#
#    Description
# 		Les opérations de maintenance sur les tables et les index d'un serveur MySQL( programme mysqlcheck)  
# 		- Le contrôle de l'intégrité des données (CHECK)
# 		- La réparation de données (REPAIR) - > MyISAM seulement
# 		- Mise à jour des statistiques utilisées par l'optimiseur (ANALYZE)
# 		- Réorganisation des données et index (OPTIMIZE)
# 		Ces opérations sont inscrites dans le log binaire (propagée à l'esclave)
#
#    Parameteres : 
#       servername : MySQL server name (obligatoire)
#       dbname     : nom de la database ou all pour toutes les databases (obligatoire)
#       option     : check ou repair ou analyze ou optimize (obligatoire)
#       tabname    : nom de table (option)
#
#    Sortie : 
#       Log file :
#          /opt/mysql/log/checkMysql_<servername>_<dbname|all>_<option>_<yyyymmdd>_<hh>H<mm>.log
#       Fichier historique maintenu en ajoutant une line
#          /opt/mysql/log/my_history_<servername>.log
#          <YYYYMMDD>_<HH>H<MM>  <Description MT>  <dbname>      <option>  OK | NOK
#          Date and time         Description of    Database name Option    correct end /
#          of execution          the operation     or all                  incorrect end
#
#----------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------
# Enable debug mode
#----------------------------------------------------------------------------------------------------
#set -x
#set -u

[ `uname -s` = "Linux" ] && alias echo='echo -e'

# Source function library
if [ -r /opt/mysql/bin/fonctionsMysql.ksh ]
    then
      . /opt/mysql/bin/fonctionsMysql.ksh
    else
      echo "\tERROR - [MYQ-15001] THE FILE /opt/mysql/bin/fonctionsMysql.ksh DOESN'T EXIST OR IS NOT READABLE"
      exit 1
fi

#----------------------------------------------------------------------------------------------------
# End script
#----------------------------------------------------------------------------------------------------
Myq_endExec()
{
rc=$1
echo "\tINFO  - END OF $0 ON ${ProductName} SERVER ${servername} DATABASE(S) ${dbname} WITH OPTION ${option}" | tee -a ${log} 2>&1
echo "\tINFO  - SEE THE LOG FILE ${log}" | tee -a ${log} 2>&1
if [ "${rc}" = "1" ]
   then
     echo "\t${COLOR_ERROR}ERROR - [MYQ-19001] THE PROCESS TERMINATED UNSUCCESSFULLY${COLOR_NORMAL}" | tee -a ${log} 2>&1
     if [ "${option}" = "optimize" ]
        then
          echo "${time}\t\t${text}\t\t\t${dbname}\t\t${option}\tNOK">>${history}
        else
          echo "${time}\t\t${text}\t\t\t${dbname}\t\t${option}\t\tNOK">>${history}
     fi
   else
     echo "\t${COLOR_SUCCESS}INFO  - THE PROCESS TERMINATED SUCCESSFULLY${COLOR_NORMAL}" | tee -a ${log} 2>&1
     if [ "${option}" = "optimize" ]
        then
          echo "${time}\t\t${text}\t\t\t${dbname}\t\t${option}\tOK">>${history}
        else
          echo "${time}\t\t${text}\t\t\t${dbname}\t\t${option}\t\tOK">>${history}
     fi
fi
echo "\t${COLOR_END}INFO  - END ON `uname -n` AT `date \"+%Y/%m/%d %H:%M:%S\"`${COLOR_NORMAL}" | tee -a ${log} 2>&1
Myq_banner "${text}" End
chmod 644 ${log} 1>>${log} 2>&1
chown ${MysqlOsUser}:${MysqlOsGroup} ${log} 1>>${log} 2>&1
chown ${MysqlOsUser}:${MysqlOsGroup} ${history} 1>>${log} 2>&1
exit ${rc}
}

#----------------------------------------------------------------------------------------------------
# Display function
#----------------------------------------------------------------------------------------------------
Myq_banner()
{
timeb=`date +"%Y/%m/%d %HH%M"`
echo "----------------------------------------------------------------------------------------------------------------"|tee -a ${log}
echo " $1\tSERVER : ${servername}\tDATABASE : ${dbname}\tOPTION : ${option}\t$2:\t${timeb}"|tee -a ${log}
echo "----------------------------------------------------------------------------------------------------------------"|tee -a ${log}

return 0
}

#----------------------------------------------------------------------------------------------------
# Check the presence and validity of the parameters
#----------------------------------------------------------------------------------------------------
Myq_ctrlUsage()
{
messusage="\t${COLOR_ERROR}ERROR - [MYQ-01001] USAGE : $0 <servername> <dbname | all> <check | repair | analyze | optimize> [<tabname>]${COLOR_NORMAL}"

if [ -z "${servername}" ]
   then
     echo ${messusage} | tee -a ${log} 2>&1
     echo "\t${COLOR_ERROR}ERROR - [MYQ-50011] THE PARAMETER SERVERNAME IS MISSING. EXIT${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi

echo ${servername} | grep "^my" 1>/dev/null 2>&1
if [ $? -gt 0 ]
   then
     echo ${messusage} | tee -a ${log} 2>&1
     echo "\t${COLOR_ERROR}ERROR - [MYQ-50012] THE PARAMETER SERVERNAME IS INCORRECT. IT MUST BE myxxxxxxxx. EXIT${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi

if [ -z "${dbname}" ]
   then
     echo ${messusage} | tee -a ${log} 2>&1
     echo "\t${COLOR_ERROR}ERROR - [MYQ-55012] THE PARAMETER DBNAME IS MISSING. EXIT${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi

if [ "${option}" != "check" -a "${option}" != "repair" -a "${option}" != "analyze"  -a "${option}" != "optimize" ]
   then
     echo ${messusage} | tee -a ${log} 2>&1
     echo "\t${COLOR_ERROR}ERROR - [MYQ-01007] THE PARAMETER OPTION ${option} IS INCORRECT. EXIT${COLOR_NORMAL}" | tee -a ${log} 2>&1
     echo "\t${COLOR_ERROR}ERROR - [MYQ-01038] THE PARAMETER OPTION MUST BE check | repair | analyze | optimize${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
    else
     echo "\tINFO  - THE PARAMETER OPTION ${option} IS CORRECT"  2>&1 | tee -a ${log} 2>&1
fi

if [ ! -z "${tabname}" -a "${dbname}" = "all" ]
   then
     echo ${messusage} | tee -a ${log} 2>&1
     echo "\t${COLOR_ERROR}ERROR - [MYQ-55013] WHEN PARAMETER TABNAME ${tabname} IS SPECIFIED, THE PARAMETER DBNAME MUST BE all DIFFERENT. EXIT${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi

return 0
}

#----------------------------------------------------------------------------------------------------
# Check if the table exists
#----------------------------------------------------------------------------------------------------
Myq_ctrlExistMysqlTable()
{
echo "show tables from ${dbname}" | mysql -u dbtune | grep -iw ${tabname} 1>/dev/null 2>&1
if [ $? -eq 0 ]
   then
     echo "\tINFO  - THE TABLE ${tabname} EXISTS ON THE DATABASE ${dbname}" | tee -a ${log} 2>&1
     return 0
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-56001] THE TABLE ${tabname} DOESN'T EXIST ON THE DATABASE ${dbname}${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi
return 0
}

#----------------------------------------------------------------------------------------------------
# Main
#----------------------------------------------------------------------------------------------------

script=$0
servername=$1

if [ "${servername}" = "help" -o "${servername}" = "--help" ]
   then
     echo "USAGE : $0 <servername> <dbname> <option> [<tabname>]"
     echo "           <servername> = my<3 to 8 numbers and/or lowercase letters>"
     echo "               <dbname> = database name or all"
     echo "               <option> = check or repair or analyze or optimize"
     echo "            [<tabname>] = table name"
     exit 0
fi

dbname=$2
option=$3
tabname=$4
nbparams=$#

Myq_initEnv ${servername}

umask 022
LANG=C
time=`date "+%Y%m%d_%HH%M"`
name=`basename ${script} | cut -d. -f1`
log=${MY_LOGDIR}/${name}_${servername}_${dbname}_${option}_${time}.log
history=${MY_LOGDIR}/my_history_${servername}.log
text=`basename ${script}`

[ -w ${log} ] && rm -f ${log}
[ `uname -s` = "Linux" ] && alias echo='echo -e'
export LANG time log history text

Myq_banner "${text}" Begin

Myq_beginExec

Myq_ctrlUser ${MysqlOsUser}
[ $? -ne 0 ] && Myq_endExec 1

Myq_ctrlUsage
[ $? -ne 0 ] && Myq_endExec 1

Myq_ctrlExistMysqlServer ${servername}
[ $? -ne 0 ] && Myq_endExec 1

Myq_initMysqlEnv ${servername}
[ $? -ne 0 ] && Myq_endExec 1

Myq_ctrlMysqlStatusServer
RetStatusServer=$?

if [ ${RetStatusServer} -eq 0 ]
   then
     if [ "${dbname}" = "all" ]
        then
          RetDatabase=0
          RetTable=0
        else
          Myq_ctrlExistMysqlDatabase ${dbname}
          RetDatabase=$?
          if [ ! -z ${tabname} ] 
             then
               if [ ${RetDatabase} -eq 0 ]
                  then
                    Myq_ctrlExistMysqlTable
                    RetTable=$?
                  else
                    RetTable=1
               fi
             else
               RetTable=0
          fi
     fi
   else
     RetDatabase=1
     RetTable=1
fi

case "${RetStatusServer}|${RetDatabase}|${RetTable}" in
     "0|0|0")  
         echo "\t${COLOR_SUCCESS}INFO  - THE CONTROLS ARE OK${COLOR_NORMAL}" | tee -a ${log} 2>&1 
         ;;
     *)  echo "\t${COLOR_ERROR}ERROR - [MYQ-01002] THE CONTROLS ARE NOK${COLOR_NORMAL}" | tee -a ${log} 2>&1 
         Myq_endExec 1
         ;;
esac

CommonOpts="--compress"
if [ "${dbname}" = "all" ]
   then
     if [ ! -z "${tabname}" ]
        then
          echo "\tINFO  - WITH all-databases ALL TABLES ARE CHECKED" | tee -a ${log} 2>&1
     fi
     CommonOpts="${CommonOpts} --all-databases --${option}"
     echo "\tINFO  - CMD : mysqlcheck -udbtune ${CommonOpts}" | tee -a ${log} 2>&1
     mysqlcheck -udbtune ${CommonOpts} 2>&1 | tee -a ${log} 2>&1
   else 
     CommonOpts="${CommonOpts} --${option}"
     if [ ! -z "${tabname}" ]
        then
          echo "\tINFO  - CMD : mysqlcheck -udbtune ${CommonOpts} ${dbname} ${tabname}" | tee -a ${log} 2>&1
          mysqlcheck -udbtune ${CommonOpts} ${dbname} ${tabname} 2>&1 | tee -a ${log} 2>&1
        else
          echo "\tINFO  - CMD : mysqlcheck -udbtune ${CommonOpts} ${dbname}" | tee -a ${log} 2>&1
          mysqlcheck -udbtune ${CommonOpts} ${dbname} 2>&1 | tee -a ${log} 2>&1
     fi
fi
RetCheck=$?

grep -i "^error "  ${log} 1>/dev/null 2>&1
[ $? -eq 0 ] && RetCheck=1

Myq_endExec ${RetCheck}
