#!/bin/ksh
#==============================================================================
#
# NOM
#      fonctionsMysql.sh
#
# ********************************************************
# AUTEUR           : MEMODBA
# VERSION          : 1.01.00
# DATE DE CREATION : 20150112
# ********************************************************
#
#set -v
#set -x
#set -u

COLOR_SUCCESS="\\033[1;32m"
COLOR_FAILURE="\\033[1;31m"
COLOR_ERROR="\\033[1;31m"
COLOR_WARNING="\\033[1;35m"
COLOR_NORMAL="\\033[0;39m"
COLOR_BEGIN="\\033[5;39m"
COLOR_END="\\033[5;39m"

#----------------------------------------------------------------------------------------------------
# Set environment variables 
#----------------------------------------------------------------------------------------------------
Myq_initKitEnv()
{
myversion=$1
[ -z ${myversion} ] && return 1

export gg=`echo ${myversion} | cut -d. -f1`
export rr=`echo ${myversion} | cut -d. -f2`
export cc=`echo ${myversion} | cut -d. -f3`

export OsStageGoRoCo=G02
export OsStageWording="Linux RHEL 6 64-bit"
export OsLinuxKernelVersion=2.6.32
# export OsInstallLogDir=/var/opt/log/install
# export OsOperationLogDir=/opt/mysql/operating/log/MysqlAllOperating
# export OsOperation2LogDir=/var/opt/log/MysqlAllOperating
# export OsOperationShellDir=/opt/mysql/operating/bin

export MysqlOsPassword=mysql
export MysqlOsUserId=504
export MysqlOsGroupId=504

# export MysqlVgProduct=infravg     # Volume group of logical volumes mysql_lv and mysql_xxx_xxx_lv
# export MysqlLvHomeSize=500        # Logical Volume Size mysql_lv (MB)
# export MysqlLvBinSize=750         # Binaries Logical Volume Size
# export MysqlLvHomeName=mysql_lv

# export Application=na
# export MysqlLvBinName=mysql_${Application}_${gg}${rr}${cc}_lv

# export OCDROM=/cdrom
# export LIV="<liv directory>"
# export MY_KITDIR=/images/mysql
# export MY_KITSTAGE=${MY_KITDIR}/${myversion}
# export MY_KITRPM=${MY_KITSTAGE}/rpms
# export MY_KITBIN=${MY_KITSTAGE}/bin
# export MY_KITDRV=${MY_KITSTAGE}/drivers

export PERL_LIB=/usr/lib64/perl5

# export MysqlServerRpm=MySQL-server-${myversion}-1.el6
# export MysqlClientRpm=MySQL-client-${myversion}-1.el6
# export MysqlSharedRpm=MySQL-shared-compat-${myversion}-1.el6
# export MysqlDevelRpm=MySQL-devel-${myversion}-1.el6
# export MysqlTestRpm=MySQL-test-${myversion}-1.el6

# export ListInstallRpm="${MysqlServerRpm} ${MysqlClientRpm} ${MysqlSharedRpm} ${MysqlDevelRpm} ${MysqlTestRpm}"
# export ListUninstallRpm="${MysqlTestRpm} ${MysqlDevelRpm} ${MysqlSharedRpm} ${MysqlClientRpm} ${MysqlServerRpm}"



export PerlDbiRpm=perl-DBI-1.609-4.el6
export PerlDBDRpm=perl-DBD-MySQL-4.013-3.el6
export PerlTermReadKeyRpm=perl-TermReadKey-2.30-13.el6
PerlVersion=`rpm -qa | grep -i ^perl-[0-9] | cut -d. -f3,4`
if [ "${PerlVersion}" = "1-119.el6" ]
   then
     export PerlTimeHiResRpm=perl-Time-HiRes-1.9721-119.el6
   else
     export PerlTimeHiResRpm=perl-Time-HiRes-1.9721-119.el6_1.1
fi
export MxRpm=mx-3.1.1-6.el6
export PythonMysqlRpm=MySQL-python-1.2.3-0.3.c1.1.el6

return 0
}

#----------------------------------------------------------------------------------------------------
# Set environment variables
#----------------------------------------------------------------------------------------------------
Myq_initEnv()
{
myservername=$1
myversion=$2
[ -z ${myservername} ] && myservername=mysql
[ -z ${myversion} ] && myversion=5.x.xx

export gg=`echo ${myversion} | cut -d. -f1`
export rr=`echo ${myversion} | cut -d. -f2`
export cc=`echo ${myversion} | cut -d. -f3`

export Application=na
export MY_VERSION=${myversion}
export MY_HOMEDIR=/opt/mysql
export MY_TMPDIR=${MY_HOMEDIR}/tmp
export MY_PDMDIR=${MY_HOMEDIR}/create
export MY_DBADIR=${MY_HOMEDIR}/work
export MY_BINDIR=${MY_HOMEDIR}/bin
export MY_LOGDIR=${MY_HOMEDIR}/log
export MY_OPERDIR=${MY_HOMEDIR}/operating
export MY_TOOLSDIR=${MY_HOMEDIR}/tools
export MY_CONFDIR=/usr
export MY_TAB=${MY_CONFDIR}/myqtab
export MY_SERVERNAME=${myservername}
export MY_SERVERPATH=/data
export MY_SERVERDIR=${MY_SERVERPATH}/${myservername}
export MY_BACKUPDIR=/sauve
export MYSQL_BINDIR=/usr
export MYSQL_HOME=${MY_SERVERDIR}
echo ${PATH} | grep "/usr/sbin" 1>/dev/null 2>&1
[ $? -gt 0 ] && export PATH=${PATH}:/usr/local/sbin:/sbin:/usr/sbin
export PERL_LIB=/usr/lib64/perl5

export OsLinuxServiceName=mysql
export ProductName="MySQL"

export MysqlOsUser=mysql
export MysqlOsGroup=mysql
export MysqlAdminUser=dbtune
export MysqlAdminPassword=dbaAdmin

export OperationFileName=OperateMysqlAll.ksh
export OperationShellDir=${MY_OPERDIR}/bin
export OperationLogDir=${MY_OPERDIR}/log
export OperationTmpDir=${MY_OPERDIR}/tmp


# PERCONA SERVER


return 0
}

#----------------------------------------------------------------------------------------------------
# Set MySQL environment variables (after creating MySQL server)
#----------------------------------------------------------------------------------------------------
Myq_initMysqlEnv()
{
myservername=$1
[ -z ${MY_TAB} ] && MY_TAB=/usr/myqtab
if [ -r ${MY_TAB} ]
   then
     egrep -v "^#|^$|^\s*$" ${MY_TAB} | egrep "${myservername}" 1>/dev/null 2>&1
     if [ $? -ne 0 ]
        then
          echo "\t${COLOR_ERROR}ERROR - [MYQ-50001] THE ${ProductName} SERVER ${myservername} DOESN'T EXIST${COLOR_NORMAL}"  2>&1 | tee -a ${log} 2>&1
          return 1
        else
          Line=`egrep -v "^#|^$|^\s*$" ${MY_TAB} | egrep "${myservername}"`
          export MYSQL_HOME=`echo ${Line} | cut -d: -f2`
          export MYSQL_BINDIR=`echo ${Line} | cut -d: -f1`
          export MYSQL_TCP_PORT=`echo ${Line} | cut -d: -f3`
          export MYSQL_UNIX_PORT=${MYSQL_HOME}/${myservername}.sock
          export MYSQL_HOST=localhost
          export MYSQL_PS1="mysql:\u:\d> "
          export MY_SERVERNAME=${myservername}
          export MY_SERVERDIR=`echo ${MYSQL_HOME} | cut -d/ -f1-3`
          export MY_VERSION=`mysql --version | cut -d" " -f6`

          echo ${PATH} | grep "${MY_HOMEDIR}/${Application}/[5-9].[0-9].[0-9][0-9]/bin:" 1>/dev/null 2>&1
          if [ $? -eq 0 ]
             then
               PATH=`echo ${PATH} | sed "s;${MY_HOMEDIR}/${Application}/[5-9].[0-9].[0-9][0-9]/bin;${MYSQL_BINDIR}/bin;g"`
               MANPATH=`echo ${MANPATH} |  sed "s;${MY_HOMEDIR}/${Application}/[5-9].[0-9].[0-9][0-9]/share/man;${MYSQL_BINDIR}/share/man;g"`
               LD_LIBRARY_PATH=`echo ${LD_LIBRARY_PATH} | sed "s;${MY_HOMEDIR}/${Application}/[5-9].[0-9].[0-9][0-9]/lib64;${MYSQL_BINDIR}/lib64;g"`
             else
               PATH=${MYSQL_BINDIR}/bin:${PATH}
               MANPATH=${MYSQL_BINDIR}/share/man:${MANPATH}
               LD_LIBRARY_PATH=${MYSQL_BINDIR}/lib64:${LD_LIBRARY_PATH}
          fi

          export MYSQL_HOME MYSQL_BINDIR MYQL_TCP_PORT MYSQL_UNIX_PORT MYSQL_HOST MYSQL_PS1 MY_SERVERDIR MY_SERVERNAME MY_VERSION PATH MANPATH LD_LIBRARY_PATH
          return 0
     fi
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-15002] THE FILE ${MY_TAB} DOESN'T EXIST OR IS NOT READABLE${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi
}

#----------------------------------------------------------------------------------------------------
# Begin script
#----------------------------------------------------------------------------------------------------
Myq_beginExec()
{
echo "\t${COLOR_BEGIN}INFO  - BEGIN ON `uname -n` AT `date \"+%Y/%m/%d %H:%M:%S\"`${COLOR_NORMAL}" | tee -a ${log} 2>&1
return 0
}

#----------------------------------------------------------------------------------------------------
# End script
#----------------------------------------------------------------------------------------------------
Myq_endExec()
{
RC=$1
if [ "${RC}" = 1 ]
   then
     echo "\t${COLOR_ERROR}ERROR - [MYQ-19001] THE PROCESS TERMINATED UNSUCCESSFULLY${COLOR_NORMAL}" | tee -a ${log} 2>&1
   else
     echo "\t${COLOR_SUCCESS}INFO  - THE PROCESS TERMINATED SUCCESSFULLY${COLOR_NORMAL}" | tee -a ${log} 2>&1
fi
echo "\tINFO  - SEE THE LOG FILE ${log}" | tee -a ${log} 2>&1
echo "\t${COLOR_END}INFO  - END ON `uname -n` AT `date \"+%Y/%m/%d %H:%M:%S\"`${COLOR_NORMAL}" | tee -a ${log} 2>&1
echo ${log} | grep "my_instbin" 1>/dev/null 2>&1
if [ $? -eq 0 ]
   then
     log2=`echo ${log} | cut -d_ -f3,5,6`
     cp ${log} ${OsInstallLogDir}/install_${ProductName}_${log2}
fi
echo ${log} | grep "my_uninstbin" 1>/dev/null 2>&1
if [ $? -eq 0 ]
   then
     log2=`echo ${log} | cut -d_ -f3,4,5`
     cp ${log} ${OsInstallLogDir}/uninstall_${ProductName}_${log2}
fi
exit ${RC}
}

#----------------------------------------------------------------------------------------------------
# Check the identity (user name) of the linux user
#----------------------------------------------------------------------------------------------------
Myq_ctrlUser()
{
User=$1
silent=$2
if [ `whoami` != "${User}" ]
   then
     if [ "${User}" = "root" ]
        then
          echo "\t${COLOR_ERROR}ERROR - [MYQ-17001] THIS SHELL MUST BE EXECUTED BY THE USER ${User}${COLOR_NORMAL}" | tee -a ${log} 2>&1
        else
          echo "\t${COLOR_ERROR}ERROR - [MYQ-17002] THIS SHELL MUST BE EXECUTED BY THE USER ${User}${COLOR_NORMAL}" | tee -a ${log} 2>&1
     fi
     return 1
   else
     [ -z ${silent} ] && echo "\tINFO  - THIS SHELL IS EXECUTED BY THE USER ${User}" | tee -a ${log} 2>&1
     return 0
fi
}

#----------------------------------------------------------------------------------------------------
# Check if the OS is Linux
#----------------------------------------------------------------------------------------------------
Myq_ctrlOS()
{
if [ `uname -s` != "Linux" ]
   then
     echo "\t${COLOR_ERROR}ERROR - [MYQ-10001] THE OPERATING SYSTEM IS NOT Linux${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
   else
     Vrh=`uname -r`
     case "${Vrh}" in
        ${OsLinuxKernelVersion}*) echo "\tINFO  - THE OPERATING SYSTEM IS ${OsStageWording}" | tee -a ${log} 2>&1
                return 0;;
        *     ) echo "\t${COLOR_ERROR}ERROR - [MYQ-10002] THE OPERATING SYSTEM IS NOT ${OsStageWording}${COLOR_NORMAL}" | tee -a ${log} 2>&1
                return 1;;
     esac
fi
}



#----------------------------------------------------------------------------------------------------
# Check if a MySQL server running on this MySQL product
#----------------------------------------------------------------------------------------------------
Myq_ctrlOneMysqlServer()
{
if [ -r ${MY_TAB} ]
   then
     grep ":${MYSQL_BINDIR}:" ${MY_TAB} | egrep -v "^#" 1>/dev/null 2>&1
     if [ $? -eq 0 ]
        then
          echo "\t${COLOR_ERROR}ERROR - [MYQ-30002] THE ${ProductName} ${MY_VERSION} IS USED BY ONE OR MORE ${ProductName} SERVER${COLOR_NORMAL}"  | tee -a ${log} 2>&1
          return 1
        else
          echo "\tINFO  - THE ${ProductName} ${MY_VERSION} IS NOT USED BY A ${ProductName} SERVER"  | tee -a ${log} 2>&1
          return 0
     fi
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-15002] THE FILE ${MY_TAB} DOESN'T EXIST OR IS NOT READABLE${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi
}

#----------------------------------------------------------------------------------------------------
# Check status of a MySQL server (according to myservername variable) 
#----------------------------------------------------------------------------------------------------
Myq_ctrlMysqlStatusServer()
{
silent=$1
mysql -u ${MysqlAdminUser} -e "status" 1>/dev/null 2>>${log}
if [ $? = 0 ]
   then
     [ -z ${silent} ] && echo "\tINFO  - THE ${ProductName} SERVER ${servername} IS ON" 2>&1 | tee -a ${log} 2>&1
     return 0
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-50003] THE ${ProductName} SERVER ${servername} IS OFF OR IS NOT AVAILABLE${COLOR_NORMAL}"  2>&1 | tee -a ${log} 2>&1
     return 1
fi
}

#----------------------------------------------------------------------------------------------------
# Check if a file system is used
#----------------------------------------------------------------------------------------------------
Myq_ctrlFuser()
{
Fs=$1
RC=0
fuser -m -u ${Fs} 1>/dev/null 2>&1
if [ $? -eq 0 ]
   then
     echo "\t${COLOR_ERROR}ERROR - [MYQ-13001] THE FOLLOWING FILE SYSTEM IS USED BY PROCESSE(S) :${COLOR_NORMAL}" | tee -a ${log} 2>&1
     fuser -m -u ${Fs}
     fuser -m -u ${Fs} 1>>${log} 2>&1
     RC=1
fi
return ${RC}
}

#----------------------------------------------------------------------------------------------------
# Check if the MySQL server is not present
#----------------------------------------------------------------------------------------------------
Myq_ctrlNotExistMysqlServer()
{
myservername=$1
[ -z ${MY_TAB} ] && MY_TAB=/usr/myqtab
if [ -r ${MY_TAB} ]
   then
     egrep -v "^#|^$|^\s*$" ${MY_TAB} | egrep "${myservername}" 1>/dev/null 2>&1
     if [ $? -eq 0 ]
        then
          echo "\t${COLOR_ERROR}ERROR - [MYQ-50004] THE ${ProductName} SERVER ${myservername} EXISTS${COLOR_NORMAL}"  2>&1 | tee -a ${log} 2>&1
          return 1
        else
          echo "\tINFO  - THE ${ProductName} SERVER ${myservername} DOESN'T EXIST"  2>&1 | tee -a ${log} 2>&1
          return 0
     fi
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-15002] THE FILE ${MY_TAB} DOESN'T EXIST OR IS NOT READABLE${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi
}

#----------------------------------------------------------------------------------------------------
# Check if the MySQL server is present
#----------------------------------------------------------------------------------------------------
Myq_ctrlExistMysqlServer()
{
myservername=$1
silent=$2
[ -z ${MY_TAB} ] && MY_TAB=/usr/myqtab
if [ -r ${MY_TAB} ]
   then
     egrep -v "^#|^$|^\s*$" ${MY_TAB} | egrep "${myservername}" 1>/dev/null 2>&1
     if [ $? -eq 0 ]
        then
          [ -z ${silent} ] && echo "\tINFO  - THE ${ProductName} SERVER ${myservername} EXISTS"  2>&1 | tee -a ${log} 2>&1
          return 0
        else
          echo "\t${COLOR_ERROR}ERROR - [MYQ-50001] THE ${ProductName} SERVER ${myservername} DOESN'T EXIST${COLOR_NORMAL}"  2>&1 | tee -a ${log} 2>&1
          return 1
     fi
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-15002] THE FILE ${MY_TAB} DOESN'T EXIST OR IS NOT READABLE${COLOR_NORMAL}" | tee -a ${log} 2>&1
     return 1
fi
}

#----------------------------------------------------------------------------------------------------
# Check if the database is not present
#----------------------------------------------------------------------------------------------------
Myq_ctrlNotExistMysqlDatabase()
{
mydbname=$1
echo "show databases" | mysql -u root | grep -w ${mydbname} 1>/dev/null 2>&1
if [ $? -eq 0 ]
   then
     echo "\t${COLOR_ERROR}ERROR - [MYQ-55002] THE DATABASE ${mydbname} ALREADY EXISTS${COLOR_NORMAL}"  2>&1 | tee -a ${log} 2>&1
     return 1
   else
     echo "\tINFO  - THE DATABASE ${mydbname} DOESN'T EXIST" 2>&1 | tee -a ${log} 2>&1
     return 0
fi
}

#----------------------------------------------------------------------------------------------------
# Check if the database is present
#----------------------------------------------------------------------------------------------------
Myq_ctrlExistMysqlDatabase()
{
mydbname=$1
echo "show databases" | mysql -u root | grep -w ${mydbname} 1>/dev/null 2>&1
if [ $? -eq 0 ]
   then
     echo "\tINFO  - THE DATABASE ${mydbname} EXISTS" 2>&1 | tee -a ${log} 2>&1
     return 0
   else
     echo "\t${COLOR_ERROR}ERROR - [MYQ-55003] THE DATABASE ${mydbname} DOESN'T EXIST${COLOR_NORMAL}" 2>&1 | tee -a ${log} 2>&1
     return 1
fi
}

